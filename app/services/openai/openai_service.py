import logging
import asyncio  # Use asyncio for non-blocking sleep
from fastapi import HTTPException
import openai
from openai import OpenAI
from exceptions.excpetions import RateLimitError, OpenAIError, InvalidRequestError
from exceptions.openai_error_handler import OpenAIErrorHandler
from services.configs.config import settings
from utils.logging_config.logging_config import logging_config

logging.config.dictConfig(logging_config)
logger = logging.getLogger("CodeReviewAI")

error_handler = OpenAIErrorHandler()

# OpenAI client setup
MAX_RETRIES = 5
EXPONENTIAL_BACKOFF_FACTOR = 2

client = OpenAI(
    api_key=settings.OPENAI_API_KEY,
)


async def analyze_code(assignment: str, level: str, contents: str) -> str:
    """
    Analyzes code and provides feedback on downsides, a rating, and comments.
    Includes retries with exponential backoff for handling rate limit errors.

    Args:
        assignment (str): The task description for the code analysis.
        level (str): The candidate's level (e.g., junior, senior).
        contents (str): The code to be analyzed.

    Returns:
        str: Feedback response generated by OpenAI API.
    """
    # Validate inputs
    if not assignment.strip():
        raise HTTPException(
            status_code=400, detail="Assignment description cannot be empty."
        )
    if not level.strip():
        raise HTTPException(status_code=400, detail="Candidate level cannot be empty.")
    if not contents.strip():
        raise HTTPException(status_code=400, detail="Code contents cannot be empty.")

    # Prepare messages for the OpenAI API
    messages = [
        {
            "role": "user",
            "content": (
                f"Please analyze the following code:\n"
                f"Task: {assignment}\n"
                f"Level: {level}\n"
                f"Code:\n{contents}\n\n"
                "Provide feedback in the following format:\n"
                "### Downsides:\n[Your feedback here]\n"
                "### Rating:\n[Your rating here]\n"
                "### Comments:\n[Your additional comments here]"
            ),
        }
    ]

    retries = 0
    while retries <= error_handler.max_retries:
        try:
            logger.info(
                f"Sending request to OpenAI API (Retry {retries}/{error_handler.max_retries})"
            )

            # Call the OpenAI API
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model="gpt-4-1106-preview",
                messages=messages,
                max_tokens=1024,
                temperature=0.5,
            )

            logger.info(f"OpenAI API response: {response}")

            # Check for empty or malformed responses
            if not response.choices or not response.choices[0].message.content:
                logger.error("Received empty or malformed response from OpenAI.")
                raise ValueError("Received empty or malformed response from OpenAI.")

            # Extract and return the content of the AI's response
            return response.choices[0].message.content

        except RateLimitError as e:
            if not await error_handler.handle_rate_limit_error(retries):
                break
            retries += 1

        except InvalidRequestError as e:
            error_handler.handle_invalid_request_error(e)

        except OpenAIError as e:
            error_handler.handle_openai_error(e)

        except Exception as e:
            error_handler.handle_unexpected_error(e)

    logger.error("Unable to get a response from OpenAI API after maximum retries.")
    raise HTTPException(
        status_code=503,
        detail="Max retries exceeded. Unable to get a response from OpenAI API.",
    )
